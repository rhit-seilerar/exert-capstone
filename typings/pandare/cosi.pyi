from _typeshed import Incomplete
from collections.abc import Generator
from dataclasses import dataclass

COSI: str

class VolatilitySymbol:
    panda: Incomplete
    inner: Incomplete
    # def __init__(self, panda, raw_ptr) -> None: ...
    def addr(self) -> int: ...
    def value(self) -> int: ...
    def name(self) -> str: ...

@dataclass
class VolatilityStructField:
    name: str
    offset: int
    type_name: str

class VolatilityStruct:
    panda: Incomplete
    inner: Incomplete
    # def __init__(self, panda, raw_ptr) -> None: ...
    def __getitem__(self, item): ...
    def get_field_by_index(self, index: int) -> str: ...
    def name(self) -> str: ...
    def offset_of_field(self, name: str) -> int: ...
    def type_of_field(self, name: str) -> str: ...
    def size(self) -> int: ...
    def fields(self) -> Generator[Incomplete]: ...
    def at(self, ptr): ...

class VolatilityBaseType:
    panda: Incomplete
    inner: Incomplete
    # def __init__(self, panda, raw_ptr) -> None: ...
    def name(self) -> str: ...
    def size(self) -> int: ...
    def is_signed(self) -> bool: ...

class Cosi:
    panda: Incomplete
    # def __init__(self, panda) -> None: ...
    def symbol_addr_from_name(self, name: str) -> int: ...
    def symbol_value_from_name(self, name: str) -> int: ...
    def kaslr_offset(self): ...
    def symbol_from_name(self, name: str) -> VolatilitySymbol: ...
    def base_type_from_name(self, name: str) -> VolatilityBaseType: ...
    def type_from_name(self, name: str) -> VolatilityStruct: ...
    def per_cpu_offset(self) -> int: ...
    def find_per_cpu_address(self, symbol: str) -> int: ...
    # def get(self, global_type, symbol, per_cpu: bool = False): ...
    def current_process(self): ...
    def process_list(self): ...
    def current_thread(self): ...
    def current_files(self): ...

class CosiFiles:
    inner: Incomplete
    panda: Incomplete
    # def __init__(self, panda, files) -> None: ...
    def __del__(self) -> None: ...
    def __len__(self) -> int: ...
    # def __getitem__(self, key: int): ...
    def __iter__(self): ...
    # def get_from_fd(self, fd: int): ...

class CosiFile:
    inner: Incomplete
    panda: Incomplete
    hold_ref: Incomplete
    # def __init__(self, panda, file_ptr, hold_ref: Incomplete | None = None) -> None: ...
    def get_name(self) -> str: ...
    def __getattr__(self, key): ...

class CosiThread:
    inner: Incomplete
    panda: Incomplete
    # def __init__(self, panda, thread) -> None: ...
    def __del__(self) -> None: ...
    def __getattr__(self, key): ...

class CosiProcess:
    panda: Incomplete
    inner: Incomplete
    hold_ref: Incomplete
    # def __init__(self, panda, proc, hold_ref: Incomplete | None = None) -> None: ...
    def __del__(self) -> None: ...
    def get_name(self): ...
    def __getattr__(self, key): ...
    def open_files(self): ...
    def children(self): ...
    def mappings(self): ...

class CosiProcList:
    inner: Incomplete
    panda: Incomplete
    # def __init__(self, panda, inner) -> None: ...
    def __del__(self) -> None: ...
    def __len__(self) -> int: ...
    # def __getitem__(self, key: int): ...
    def __iter__(self): ...

class CosiModule:
    panda: Incomplete
    inner: Incomplete
    hold_ref: Incomplete
    # def __init__(self, panda, proc, hold_ref: Incomplete | None = None) -> None: ...
    def __del__(self) -> None: ...
    def get_name(self): ...
    def get_file(self): ...
    def __getattr__(self, key): ...

class CosiMappings:
    inner: Incomplete
    panda: Incomplete
    # def __init__(self, panda, inner) -> None: ...
    def __del__(self) -> None: ...
    def __len__(self) -> int: ...
    # def __getitem__(self, key: int): ...
    def __iter__(self): ...

struct_types: Incomplete
types_from_size: Incomplete

class CosiIntrusiveListAccessor:
    # def __init__(self, panda, ptr) -> None: ...
    def __getattr__(self, name): ...

class CosiGuestPointer:
    # def __init__(self, panda, type_name, ptr, parent: Incomplete | None = None) -> None: ...
    def __getattr__(self, name): ...
    def __getitem__(self, item): ...
    def __dir__(self): ...
    # def before(self, type_name: str): ...
    # def after(self, type_name: str): ...
    def as_linux_list(self, sibling: str, list_entry_type: Incomplete | None = None) -> list[CosiGuestPointer]: ...
    def deref(self): ...
    def null_terminated(self) -> str: ...
    def get_raw_ptr(self) -> int: ...
    # def cast(self, cast_to: str): ...
    # def container_of(self, type_name: str, field_name: str): ...
